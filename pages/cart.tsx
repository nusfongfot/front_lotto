import { listCart, removeCart } from "@/api/cart";
import { createBillSale } from "@/api/lotto";
import { successToast } from "@/utils/notification";
import { numberWithComma } from "@/utils/numberWithComma";
import useInfo from "@/zustand/auth";
import { useCartStore } from "@/zustand/cart";
import {
  Box,
  Button,
  Container,
  Paper,
  Stack,
  TextField,
  Typography,
} from "@mui/material";
import Head from "next/head";
import * as React from "react";

export default function CartPage() {
  const { accInfo } = useInfo();
  const { carts, setCarts } = useCartStore();
  const [values, setValues] = React.useState({
    customerName: "",
    customerPhone: "",
    customerAddress: "",
  });

  const handleChangeValues = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setValues((prevState) => ({
      ...prevState,
      [name]: value,
    }));
  };

  const handleGetCarts = async () => {
    try {
      const res = await listCart(accInfo.id);
      setCarts(res.data);
    } catch (error) {
      return error;
    }
  };

  const handleRemoveCart = async (id: number) => {
    try {
      await removeCart(id);
      handleGetCarts();
      successToast("remove successfully", 1500);
    } catch (error) {
      return error;
    }
  };

  const handleConfirmBuy = async () => {
    try {
      const body = {
        customerName: values.customerName,
        customerPhone: values.customerPhone,
        customerAddress: values.customerAddress,
        carts,
      };

      const res = await createBillSale(body);
      if (res.message == "create billSale successfully") {
        successToast("confirm successfully", 1000);
        window.location.replace("/");

        for (let index = 0; index < carts.length; index++) {
          const item: any = carts[index];
          await removeCart(item.id);
        }
      }
      console.log("res", res);
    } catch (error) {
      return error;
    }
  };

  React.useEffect(() => {
    handleGetCarts();
  }, [accInfo.id]);

  return (
    <Container maxWidth='xl' sx={{ mb: 2 }}>
      <Head>
        <title>BBG Cart</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Container maxWidth='sm' sx={{ mt: 2 }}>
        <Stack flexDirection={"row"} sx={{ overflowX: "auto" }} gap={8}>
          {carts.map((item: any) => (
            <Stack flexDirection={"row"} alignItems={"center"} key={item.id}>
              <img
                src='../assets/images/lotto.png'
                style={{ width: 300, height: 150 }}
              />
              <Typography
                sx={{
                  background: "rgba(220, 220, 121, 1)",
                  color: "black",
                  ml: "-155px",
                  mt: "-95px",
                  height: 40,
                }}
                variant='h4'
                fontWeight={600}
              >
                {item.lotto.number}
              </Typography>
            </Stack>
          ))}
        </Stack>

        <Paper sx={{ borderRadius: "0.5rem", p: 2, mt: 3 }}>
          <Typography variant='h6'>รายการลอตเตอรี่</Typography>

          {carts.map((item: any) => (
            <Paper sx={{ p: 2 }} key={item.id}>
              <Stack
                justifyContent={"space-between"}
                flexDirection={"row"}
                alignItems={"center"}
              >
                <Stack
                  justifyContent={"space-between"}
                  flexDirection={"row"}
                  alignItems={"center"}
                  gap={1}
                >
                  <Button
                    variant='contained'
                    size='small'
                    color='error'
                    onClick={() => handleRemoveCart(item.id)}
                  >
                    x
                  </Button>
                  <Typography>{item.lotto.number + " * 1"}</Typography>
                </Stack>
                <Typography>
                  {numberWithComma(item.lotto.sale) + " บาท"}
                </Typography>
              </Stack>
            </Paper>
          ))}

          <Paper sx={{ p: 2, mt: 2, background: "rgba(224, 232, 115, 0.4)" }}>
            <Stack
              justifyContent={"space-between"}
              flexDirection={"row"}
              alignItems={"center"}
            >
              <Typography>จำนวน</Typography>
              <Typography>{`${carts?.length} ใบ`}</Typography>
            </Stack>
            <Stack
              justifyContent={"space-between"}
              flexDirection={"row"}
              alignItems={"center"}
            >
              <Typography fontWeight={700}>ยอดรวมทั้งสิ้น</Typography>
              <Typography fontWeight={700} variant='h5'>
                {numberWithComma(
                  carts.reduce((acc: any, val: any) => val.lotto.sale + acc, 0)
                ) + " บาท"}
              </Typography>
            </Stack>
          </Paper>

          <Paper sx={{ p: 2, mt: 2, background: "rgba(224, 232, 115, 0.4)" }}>
            <Typography variant='h5'>
              โอนเงินไปยัง บัญชี SCB สรวิศ กองศรีมา
            </Typography>
            <Typography variant='h5'>08888888</Typography>
            <Typography variant='h5'>
              แนบสลิปไปยัง ID Line: @supportLotto
            </Typography>
          </Paper>

          <Box sx={{ mt: 2 }} component={"form"}>
            <Typography>ชื่อผู้ซื้อ</Typography>
            <TextField
              size='small'
              fullWidth
              value={values.customerName}
              name='customerName'
              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                handleChangeValues(e)
              }
            />
            <Typography>เบอร์โทร</Typography>
            <TextField
              size='small'
              fullWidth
              value={values.customerPhone}
              name='customerPhone'
              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                handleChangeValues(e)
              }
            />
            <Typography>
              ที่อยู่ในการจัดส่ง (หากต้องการเก็บไว้ที่ร้าน ไม่ต้องกรอกข้อมูลนี้)
            </Typography>
            <TextField
              size='small'
              fullWidth
              value={values.customerAddress}
              name='customerAddress'
              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                handleChangeValues(e)
              }
            />
            <Button
              variant='contained'
              size='small'
              sx={{ mt: 2 }}
              onClick={handleConfirmBuy}
              disabled={
                carts.length == 0 ||
                values.customerName == "" ||
                values.customerPhone == ""
              }
            >
              ยืนยันคำสั่งซื้อ
            </Button>
          </Box>
        </Paper>
      </Container>
    </Container>
  );
}
